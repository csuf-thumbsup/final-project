def run_parser(parsing_table_1, input_str, terminals, starting_non_terminal):
    str_list = list(input_str)
    stack = ['$', starting_non_terminal] # initialize stack to $ and the starting non-terminal

    i = 0
    read_char = str_list[i] # init read_char to first char

    while(True):

        # pop the stack on every iteration and store into popped_char
        popped_char = stack.pop()

        # immediate check if the popped_char is a terminal
        if popped_char in terminals:
            # we found a match
            print('match: ' + popped_char + '\tstack: '+ stack.__str__())
            i = i + 1
            read_char = str_list[i]
            continue
        elif popped_char == '$':
            # check for end of string. If we got here then you're good to go!
            print('match: ' + popped_char + '\tstack: ' + stack.__str__())
            print('Your string IS valid:', input_str)
            return;

        # find [popped_char, read_char] in our parsing_table_1
        temp_parsed_value = parsing_table_1[popped_char][read_char]

        # our checks and balances
        if temp_parsed_value == 'undef':
            print('Your string is NOT valid for the given language!:', input_str)
            return;
        elif temp_parsed_value == 'lambda':
            # skip and loop back to top
            continue
        else:
            # we found a valid value
            # just put back on the stack even if its a terminal
            reversed_value = temp_parsed_value[::-1]
            for x in reversed_value:
                # push the values in reverse order
                stack.append(x)


if __name__ == '__main__':
    parsing_table_1 = {
        'A': {
            'program': 'program B ; var C begin D end.',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'B': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'EF',
            'b': 'EF',
            'c': 'EF',
            '$': 'undef'
            },
        'F': {
            'program': 'undef',
            ';': 'Y',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'Y',
            ',': 'Y',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'Y',
            '=': 'Y',
            '+': 'Y',
            '-': 'Y',
            '*': 'Y',
            '/': 'Y',
            '0': 'Y',
            '1': 'Y',
            '2': 'Y',
            '3': 'Y',
            '4': 'Y',
            '5': 'Y',
            '6': 'Y',
            '7': 'Y',
            '8': 'Y',
            '9': 'Y',
            'a': 'Y',
            'b': 'Y',
            'c': 'Y',
            '$': 'undef'
            },
        'Y': {
            'program': 'undef',
            ';': 'lambda',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'lambda',
            ',': 'lambda',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'lambda',
            '=': 'lambda',
            '+': 'lambda',
            '-': 'lambda',
            '*': 'lambda',
            '/': 'lambda',
            '0': 'HY',
            '1': 'HY',
            '2': 'HY',
            '3': 'HY',
            '4': 'HY',
            '5': 'HY',
            '6': 'HY',
            '7': 'HY',
            '8': 'HY',
            '9': 'HY',
            'a': 'EY',
            'b': 'EY',
            'c': 'EY',
            '$': 'undef'
            },
        'C': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'I:J;',
            'b': 'I:J;',
            'c': 'I:J;',
            '$': 'undef'
            },
        'I': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'BT',
            'b': 'BT',
            'c': 'BT',
            '$': 'undef'
            },
        'T': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'lambda',
            ',': ',BT',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'J': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'integer',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'D': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'KU',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'KU',
            'b': 'KU',
            'c': 'KU',
            '$': 'undef'
            },
        'U': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'lambda',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'KU',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'KU',
            'b': 'KU',
            'c': 'KU',
            '$': 'undef'
            },
        'K': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'L',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'M',
            'b': 'M',
            'c': 'M',
            '$': 'undef'
            },
        'L': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'print(B);',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'M': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'B=N;',
            'b': 'B=N;',
            'c': 'B=N;',
            '$': 'undef'
            },
        'N': {
            'program': 'undef',
            ';': 'OV',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'OV',
            ')': 'OV',
            '=': 'undef',
            '+': 'OV',
            '-': 'OV',
            '*': 'OV',
            '/': 'OV',
            '0': 'OV',
            '1': 'OV',
            '2': 'OV',
            '3': 'OV',
            '4': 'OV',
            '5': 'OV',
            '6': 'OV',
            '7': 'OV',
            '8': 'OV',
            '9': 'OV',
            'a': 'OV',
            'b': 'OV',
            'c': 'OV',
            '$': 'undef'
            },
        'V': {
            'program': 'undef',
            ';': 'lambda',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'lambda',
            '=': 'undef',
            '+': '+OV',
            '-': '-OV',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'O': {
            'program': 'undef',
            ';': 'PW',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'PW',
            ')': 'PW',
            '=': 'PW',
            '+': 'PW',
            '-': 'PW',
            '*': 'PW',
            '/': 'PW',
            '0': 'PW',
            '1': 'PW',
            '2': 'PW',
            '3': 'PW',
            '4': 'PW',
            '5': 'PW',
            '6': 'PW',
            '7': 'PW',
            '8': 'PW',
            '9': 'PW',
            'a': 'PW',
            'b': 'PW',
            'c': 'PW',
            '$': 'undef'
            },
        'W': {
            'program': 'undef',
            ';': 'lambda',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'lambda',
            '=': 'undef',
            '+': 'lambda',
            '-': 'lambda',
            '*': '*PW',
            '/': '/PW',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'undef',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'P': {
            'program': 'undef',
            ';': 'Q',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': '(N)',
            ')': 'Q',
            '=': 'undef',
            '+': 'Q',
            '-': 'Q',
            '*': 'Q',
            '/': 'Q',
            '0': 'Q',
            '1': 'Q',
            '2': 'Q',
            '3': 'Q',
            '4': 'Q',
            '5': 'Q',
            '6': 'Q',
            '7': 'Q',
            '8': 'Q',
            '9': 'Q',
            'a': 'B',
            'b': 'B',
            'c': 'B',
            '$': 'undef'
            },
        'Q': {
            'program': 'undef',
            ';': 'RHS',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'RHS',
            '=': 'undef',
            '+': 'RHS',
            '-': 'RHS',
            '*': 'RHS',
            '/': 'RHS',
            '0': 'RHS',
            '1': 'RHS',
            '2': 'RHS',
            '3': 'RHS',
            '4': 'RHS',
            '5': 'RHS',
            '6': 'RHS',
            '7': 'RHS',
            '8': 'RHS',
            '9': 'RHS',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'R': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': '+',
            '-': '-',
            '*': 'undef',
            '/': 'undef',
            '0': 'lambda',
            '1': 'lambda',
            '2': 'lambda',
            '3': 'lambda',
            '4': 'lambda',
            '5': 'lambda',
            '6': 'lambda',
            '7': 'lambda',
            '8': 'lambda',
            '9': 'lambda',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'S': {
            'program': 'undef',
            ';': 'X',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'X',
            '=': 'undef',
            '+': 'X',
            '-': 'X',
            '*': 'X',
            '/': 'X',
            '0': 'X',
            '1': 'X',
            '2': 'X',
            '3': 'X',
            '4': 'X',
            '5': 'X',
            '6': 'X',
            '7': 'X',
            '8': 'X',
            '9': 'X',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'X': {
            'program': 'undef',
            ';': 'lambda',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'lambda',
            '=': 'undef',
            '+': 'lambda',
            '-': 'lambda',
            '*': 'lambda',
            '/': 'lambda',
            '0': 'HX',
            '1': 'HX',
            '2': 'HX',
            '3': 'HX',
            '4': 'HX',
            '5': 'HX',
            '6': 'HX',
            '7': 'HX',
            '8': 'HX',
            '9': 'HX',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'H': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': '0',
            '1': '1',
            '2': '2',
            '3': '3',
            '4': '4',
            '5': '5',
            '6': '6',
            '7': '7',
            '8': '8',
            '9': '9',
            'a': 'undef',
            'b': 'undef',
            'c': 'undef',
            '$': 'undef'
            },
        'E': {
            'program': 'undef',
            ';': 'undef',
            'var': 'undef',
            'begin': 'undef',
            'end.': 'undef',
            ':': 'undef',
            ',': 'undef',
            'integer': 'undef',
            'print': 'undef',
            '(': 'undef',
            ')': 'undef',
            '=': 'undef',
            '+': 'undef',
            '-': 'undef',
            '*': 'undef',
            '/': 'undef',
            '0': 'undef',
            '1': 'undef',
            '2': 'undef',
            '3': 'undef',
            '4': 'undef',
            '5': 'undef',
            '6': 'undef',
            '7': 'undef',
            '8': 'undef',
            '9': 'a',
            'a': 'b',
            'b': 'c',
            'c': 'undef',
            '$': 'undef'
            }
        }
    terminals_1 = ['program', ';', 'var', 'begin', 'end.', ':', ',', 'integer', 'print', '+', '-', '*', '/', '(', ')', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c']
    input_strs_1 = ['program a 2 0 1 6 ; var a 1 , b 2 a , c , b a 1 2 : integer ; begin a 1 = 3 ; b 2 a = 4 ; c = 5 ; print ( c ) ; b a 1 2 = a 1 * ( b 2 a + 2 * c ) ; print ( b a 1 2 ) ; end.']
    starting_non_terminal_1 = 'A'


    print('Parsing Problem')
    for curr_str in input_strs_1:
        print('\nResults for ' + curr_str + ': ')
        run_parser(parsing_table_1, curr_str, terminals_1, starting_non_terminal_1)
